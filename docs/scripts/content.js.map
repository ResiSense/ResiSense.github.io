{"mappings":"A,C,K,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECKA,SAAS,EAAgB,CAA8B,CAAE,CAAa,EAClE,IAAM,EAAc,SAAS,aAAa,CAAC,MAC3C,CAAA,EAAY,KAAK,CAAC,QAAQ,CAAG,WAC7B,EAAY,KAAK,CAAC,UAAU,CAAG,SAC/B,EAAY,KAAK,CAAC,MAAM,CAAG,EAC3B,EAAQ,WAAW,CAAC,GACpB,IAAM,EAAS,OAAO,gBAAgB,CAAC,GAAa,MAAM,CAE1D,OADA,EAAQ,WAAW,CAAC,GACb,WAAW,EACtB,C,O,c,C,E,O,C,kB,C,I,I,E,I,K,E,W,C,E,a,C,C,GAdA,OAAO,UAAU,CAAC,KACd,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAChC,EAAG,I,G,I,E,E,QCAH,EACI,IAAM,EAAa,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,CAGlD,EAAwB,SAAS,oBAAoB,CAAC,kBAAkB,CAAC,EAAE,CAC3E,EAAuB,EAAsB,gBAAgB,CAAC,EAAW,IAAI,CAAC,OAC9E,EAAoD,CAAC,EAW3D,SAAS,IACL,IAAK,IAAM,KAAW,EAAsB,CAExC,IAAM,EAAU,EAAQ,OAAO,CAAC,WAAW,GAGrC,EAAiB,AAFJ,EAAQ,qBAAqB,GAAG,GAAG,EAC9B,CAAA,CAAgB,CAAC,EAAQ,EAAI,CAAA,EAGrD,GADA,EAAQ,SAAS,CAAC,MAAM,CAAC,SAAU,GAC/B,CAAC,EAAkB,KAC3B,CACJ,CAIA,SAAS,IAGL,AAFwB,CAAA,SAAS,aAAa,CAAC,oBAAoB,iBAAiB,2BAC7E,AAAC,CAAA,KAAQ,MAAM,AAAI,MAAM,8BAA+B,CAAA,GAAA,EAC/C,OAAO,CAAC,AAAA,IAEpB,AADqB,EAAsB,aAAa,CAAC,CAAC,mBAAmB,EAAE,EAAQ,EAAE,CAAC,EAAE,CAAC,EAChF,KAAK,CAAC,eAAe,CAAG,iBAAiB,GAAS,eAAe,AAClF,EACJ,CA/BA,EAAW,OAAO,CAAC,AAAA,IACf,IAAM,EAAU,EAAsB,oBAAoB,CAAC,EAAQ,CAAC,EAAE,CAClE,GACA,CAAA,CAAgB,CAAC,EAAQ,CACrB,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,EAAS,iBAAiB,GAAS,gBAAgB,CAAC,eATpD,CAOxB,CAIJ,GAEA,SAAS,gBAAgB,CAAC,mBAAoB,GAC9C,SAAS,gBAAgB,CAAC,SAAU,GAapC,SAAS,gBAAgB,CAAC,mBAAoB,GAC9C,SAAS,gBAAgB,CAAC,SAAU,EASxC,C,C","sources":["<anon>","scripts/globalLibrary.ts","scripts/content.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8bfa\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8bfa\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"df1N6\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertToPixels\", () => $9171b13acd3e378e$export$a0b4c99153c9b294);\nwindow.setTimeout(()=>{\n    document.body.classList.add(\"post-buffered\");\n}, 100);\nfunction $9171b13acd3e378e$export$a0b4c99153c9b294(element, value) {\n    const tempElement = document.createElement(\"div\");\n    tempElement.style.position = \"absolute\";\n    tempElement.style.visibility = \"hidden\";\n    tempElement.style.height = value;\n    element.appendChild(tempElement);\n    const pixels = window.getComputedStyle(tempElement).height;\n    element.removeChild(tempElement);\n    return parseFloat(pixels);\n}\n\n});\n\n\nvar $df1N6 = parcelRequire(\"df1N6\");\n{\n    const stickyTags = [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n    ];\n    const STICKY_TOLERANCE_PX = 1;\n    const paintedContentElement = document.getElementsByTagName(\"painted-content\")[0];\n    const stickyHeaderElements = paintedContentElement.querySelectorAll(stickyTags.join(\", \"));\n    const stickyTopHeights = {};\n    stickyTags.forEach((tagName)=>{\n        const element = paintedContentElement.getElementsByTagName(tagName)[0];\n        if (element) stickyTopHeights[tagName] = (0, $df1N6.convertToPixels)(element, getComputedStyle(element).getPropertyValue(\"--this-top\")) + STICKY_TOLERANCE_PX;\n    });\n    /* -------------------------------------------------------------------------- */ document.addEventListener(\"DOMContentLoaded\", determineStickiness);\n    document.addEventListener(\"scroll\", determineStickiness);\n    function determineStickiness() {\n        for (const element of stickyHeaderElements){\n            //\n            const tagName = element.tagName.toLowerCase();\n            const elementTop = element.getBoundingClientRect().top;\n            const stickyTopHeight = stickyTopHeights[tagName] ?? 0;\n            const shouldBeSticky = elementTop <= stickyTopHeight;\n            element.classList.toggle(\"sticky\", shouldBeSticky);\n            if (!shouldBeSticky) break;\n        }\n    }\n    /* -------------------------------------------------------------------------- */ document.addEventListener(\"DOMContentLoaded\", updateScrollMarkerMargins);\n    document.addEventListener(\"resize\", updateScrollMarkerMargins);\n    function updateScrollMarkerMargins() {\n        const headingElements = document.querySelector(\"painted-content\")?.querySelectorAll(\"h1, h2, h3, h4, h5, h6\") || (()=>{\n            throw new Error(\"Heading elements not found!\");\n        })();\n        headingElements.forEach((heading)=>{\n            const scrollMarker = paintedContentElement.querySelector(`.scroll-marker[id=\"${heading.id}\"]`);\n            scrollMarker.style.scrollMarginTop = getComputedStyle(heading).scrollMarginTop;\n        });\n    }\n}\n})();\n//# sourceMappingURL=content.js.map\n","window.setTimeout(() => {\n    document.body.classList.add('post-buffered');\n}, 100);\n\n\nfunction convertToPixels(element: Element | HTMLElement, value: string): number {\n    const tempElement = document.createElement('div');\n    tempElement.style.position = 'absolute';\n    tempElement.style.visibility = 'hidden';\n    tempElement.style.height = value;\n    element.appendChild(tempElement);\n    const pixels = window.getComputedStyle(tempElement).height;\n    element.removeChild(tempElement);\n    return parseFloat(pixels);\n}\n\nexport { convertToPixels };","import { convertToPixels } from \"./globalLibrary\";\n\n{\n    const stickyTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6',] as const;\n    const STICKY_TOLERANCE_PX = 1;\n    type StickyTag = typeof stickyTags[number];\n    const paintedContentElement = document.getElementsByTagName('painted-content')[0];\n    const stickyHeaderElements = paintedContentElement.querySelectorAll(stickyTags.join(', '));\n    const stickyTopHeights: { [key in StickyTag]?: number } = {};\n    stickyTags.forEach(tagName => {\n        const element = paintedContentElement.getElementsByTagName(tagName)[0];\n        if (element) {\n            stickyTopHeights[tagName] =\n                convertToPixels(element, getComputedStyle(element).getPropertyValue('--this-top')) + STICKY_TOLERANCE_PX;\n        }\n    });\n    /* -------------------------------------------------------------------------- */\n    document.addEventListener('DOMContentLoaded', determineStickiness);\n    document.addEventListener('scroll', determineStickiness);\n    function determineStickiness() {\n        for (const element of stickyHeaderElements) {\n            //\n            const tagName = element.tagName.toLowerCase() as StickyTag;\n            const elementTop = element.getBoundingClientRect().top;\n            const stickyTopHeight = stickyTopHeights[tagName] ?? 0;\n            const shouldBeSticky = elementTop <= stickyTopHeight;\n            element.classList.toggle('sticky', shouldBeSticky);\n            if (!shouldBeSticky) { break; }\n        };\n    }\n    /* -------------------------------------------------------------------------- */\n    document.addEventListener('DOMContentLoaded', updateScrollMarkerMargins);\n    document.addEventListener('resize', updateScrollMarkerMargins);\n    function updateScrollMarkerMargins() {\n        const headingElements = document.querySelector('painted-content')?.querySelectorAll('h1, h2, h3, h4, h5, h6')\n            || (() => { throw new Error('Heading elements not found!') })();\n        headingElements.forEach(heading => {\n            const scrollMarker = paintedContentElement.querySelector(`.scroll-marker[id=\"${heading.id}\"]`) as HTMLElement;\n            scrollMarker.style.scrollMarginTop = getComputedStyle(heading).scrollMarginTop;\n        });\n    }\n}"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$9171b13acd3e378e$export$a0b4c99153c9b294","element","value","tempElement","document","createElement","style","position","visibility","height","appendChild","pixels","window","getComputedStyle","removeChild","parseFloat","Object","defineProperty","get","set","s","enumerable","configurable","setTimeout","body","classList","add","$df1N6","stickyTags","paintedContentElement","getElementsByTagName","stickyHeaderElements","querySelectorAll","join","stickyTopHeights","determineStickiness","tagName","toLowerCase","shouldBeSticky","elementTop","getBoundingClientRect","top","toggle","updateScrollMarkerMargins","headingElements","querySelector","forEach","heading","scrollMarker","scrollMarginTop","convertToPixels","getPropertyValue","addEventListener"],"version":3,"file":"content.js.map"}